#! /usr/bin/env python3

"""This is a quick script that reads a nodes.json as generated by parity in
order to create a list of possible bootstrap nodes.

The nodes.json file can be found in
~/.local/share/io.parity.ethereum/chains/Trustlines/network/nodes.json
"""

import json
import re
import socket
import sys


def try_socket_connect(address):
    """try to connect to the given address

    Some of the nodes listed in the nodes.json file are rather old. Try to
    connect to them
    """
    sock = None
    try:
        sock = socket.create_connection(address, timeout=5.0)
        return True
    except (socket.error, socket.timeout):
        return False
    finally:
        if sock is not None:
            sock.close()


def read_nodes_json(nodes_json_path):
    with open(nodes_json_path, "rb") as f:
        return json.load(f)["nodes"]


def find_network_address(url):
    match = re.match(".*@([.0-9]+):([0-9]+)", url)
    return (match.group(1), int(match.group(2)))


def node_last_contact_success(node):
    last_contact = node.get("last_contact") or {}
    return last_contact.get("success", 0)


def main():
    if len(sys.argv) != 2:
        print("Usage: extract-bootnodes /path/to/nodes.json")
        sys.exit(1)

    nodes_json_path = sys.argv[1]
    nodes = read_nodes_json(nodes_json_path)
    nodes = [node for node in nodes if node_last_contact_success(node) > 0]

    # sort them by last_contact time in case we later do not take all of the nodes
    nodes.sort(key=node_last_contact_success, reverse=True)

    print(f"Trying to connect to {len(nodes)} possible nodes")

    good_nodes = []
    for node in nodes:

        if try_socket_connect(find_network_address(node["url"])):
            good_nodes.append(node)
        else:
            print(f"Could not connect to {node['url']}")

    # dump them as json in order to be able to paste them into the config file
    print("\nbootnodes:\n")
    print(json.dumps({"nodes": sorted([node["url"] for node in good_nodes])}, indent=4))


if __name__ == "__main__":
    main()
